#include <math.h>

typedef double (*func)(double); // функции из R в R

typedef enum { // ошибки
	OK, // код заканчивает работу без ошибок
	DATA_ERR, // ошибка данных
	NO_ROOT, // нет корней на отрезке
} error;


/*
* Функция реализует метод хорд(секущих) для поиска корень функции на данном отрезке 
* На вход нельзя подавать фкнкции с несколькими корнями и сторогомонотонные
*
* Параметры:
*              f - функция
*              а - вещественное число, левая граница отрезка.
*              b - вещественное число, правая граница отрезка.
*              eps - погрешность
*              *err - указатель на код ошибки
*				*kol_iters - указатель на количество итераций
*
* Вычисляются значения на границах отрезка. 
* Если левая граница больше правой, то выдается ошибка DATA_ERR
* Если значения функции на границах одного знака, то выдается ошибка NO_ROOT.   
* Если же значения разных знаков, то значения в этих точках соединяются хордой.
* Вычисляется точка, в которой эта хорда пересекает ось ох, и определяется значение функции в этой точке.
* В нее сдвигается конец хорды, в котором значение функции того же знака.
* Далее, пока значения функций на концах хорды остаются разных знаков или не совпадают, эти операции продолжают выполняться. 
* Когда модуль разности текущей точки пересечения с осью ох и предыдущей становится меньше погрешности, функция завершает работу, 
* передает код ошибки OK и точку, в которой значение близко к нулю. 
* Если возвращаются коды других ошибок, то функция возвращает значение -1.
*
* Вывод:
* Код выполнен без ошибок и не преодлел предел количества итераций: возвращается код ошибки OK и точка, в которой функция принимает значение 0
* (с учетом погрешности) и выводится количество итераций.
* В остальных случаях количество итераций не выводится.
* Превышен предел количества итераций или же значения функции одного знака: возвращается код ошибки NO_ROOT и значение -1.
* Левый конец отрезка больше правого: возвращается код ошибки DATA_ERR и значение -1.
*/

double chord_method(func f, double a, double b, double eps, error *err, int *kol_iters);
