#include <math.h>

/* Множество функций из R в R*/
typedef double (*RRFun)(double);

/* Основные ошибки*/
typedef enum {
	NA_OK, /* код заканчивает работу без ошибок*/
	NA_LIMIT /* превышен лимит обращения к функции */
}Error;


/* Подсчет значений композиции функции.
 	
 	Параметры: f - первая действительнозначная функция 
 *		   g - вторая действительнозначная функция
 *		   х - аргумент
 *		   eps - погрешность
 *		   *err - указатель на код ошибки
 *	Подсчитывается значение функции f в точке х, после подсчитывается значение композиции функций f и g.
 *	Если значение композиции с учетом погрешности не удовлетворяет условию, пересчитывается новое значение для очередной композиции функций f.
 *	(f(x))->(f(f(x)))
 *	Вложение функции f в композицию функций f продолжается до тех пор, пока композиция g с композициями f с учетом погрешности не станет положительной.
 *	Если этого не произойдет за определенное число операций(10000), выдастся ошибка NA_LIMIT.
 *	Если функция успешно завершается, в код ошибки записывается NA_OK.
 *	Вывод:
 *	Как только нашелся у = (f...f(f(x))...) такой, что g(у)>0, возвращается код ошибки NA_OK и значение у. 
 *	Если такой у не нашелся, а цикл закончил свою работу, возвращается код ошибки NA_LIMIT, а значение у приравнивается к 0. и не выводится на экран. 
 */

double composing_with_requisition(RRFun f, RRFun g, double x, double eps, Error *err);
