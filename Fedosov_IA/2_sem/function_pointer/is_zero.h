#include <math.h>


//функция R -> R
typedef double (*Rfun)(double);


//функция R*R -> Z
typedef int (*R_Rfun)(double, double);


//Варианты ошибок
typedef enum {
	OK, //ошибок нет
	OP_LIMIT //превышено число выполнений функции
}Error;


int number_when_zero(Rfun f, R_Rfun g, double x, Error *error);


/*
Функция возвращает минимальное число операций f(f(....f(x))) при котором g от двух последних членов равно 0.

Переменные:
	x - аргумент функции f
	f - произвольная функция на действительных числах
	g - произвольная функция от двух действительных аргументов, выдающая элемент из целых чисел
	error - код ошибки
	
Принцип работы:
	последовательно вычисляются значения функции f и подставляются в g, тем самым проверяя нужное условие. Имеется ограничение на количество выполнений функции f - 1000. Если за это время нужный результат не получен, присваевается значение ошибки, указывающее на выход за предел.
*/
	
