
#ifndef REAL_H
#define REAL_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Основные ошибки*/
typedef enum {
    NA_OK, /*Нет ошибок*/
    FILE_WR, /*ошибка открытия файла*/
    NA_MEMORY_ERR, /*ошибка выделения памяти*/
}Error;

/*Структура для записи стэка*/
typedef struct tag_obj{
    int state; /*состояние - 1, 2 - если не надо удалять следующие строки, -1, -2 - если надо удалять следующие строки*/
    struct tag_obj* next; /*указатель на следующий элемент стэка*/
} OBJ;

/* Параметры: *term - адрес строки, содержащйся в следующем блоке, 
 *  *next - адрес следующего блока.
 *  Структура выполняет функцию массива, содержащего слова, стоящие после define.              
 */
struct item{  
    char *term;
    struct item *next;
};

/*	Параметры: *f - массив строк с исходным текстом файла.
 *             *fout - массив, в который будет передан ответ. 
 *             line - количество строк в исходном файле.
 *             *err - указатель на код ошибки.
 * Функция обрабатывает текст полученного файла с кодом, сохраняя, в соответствии с выполнением условий, команды программы под инструкциями
 * #ifdef - #else - #endif. На вход подается рабочий код без синтаксических и логических ошибок (Если есть #ifdef или #else, то обязательно
 *                                                                                                                      прописан и #endif)
 * Вывод: 
 * Если код выполнен без ошибок, выводится код ошибки NA_OK и в консоль передаются данные о положении в файле искомых инструкций.
 * Последний исправленный файл записывается в файл newcode.c
 * Если возникают ошибки при открытии файла или при работе с ним, возвращается код ошибки FILE_WR и значение -1.
 * Если возникают ошибки при выделении памяти, возвращается код ошибки NA_MEMORY_ERR и значениие -1.
 */

int Condit_compil(FILE *f, FILE *fout, Error *err);

#endif 

